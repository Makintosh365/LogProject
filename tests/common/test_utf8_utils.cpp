// tests/common/test_utf8_utils.cpp
#include "all_tests.h"
#include "common/utf8_utils.h"
#include <cassert>
#include <string>

static void expectLen(const std::string &s, std::size_t expected) {
  auto got = utf8Length(s);
  assert(got == expected);
}

void test_utf8_utils_ascii_basic() {
  expectLen("hello", 5); // ASCII
  expectLen("", 0);      // –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
  expectLen("   ", 3);   // –ø—Ä–æ–±–µ–ª—ã
}

void test_utf8_utils_cyrillic() {
  // ¬´–ü—Ä–∏–≤–µ—Ç¬ª –≤ UTF-8: 6 —Å–∏–º–≤–æ–ª–æ–≤, –Ω–æ –±–∞–π—Ç–æ–≤ –±–æ–ª—å—à–µ
  expectLen(u8"–ü—Ä–∏–≤–µ—Ç", 6);
  expectLen(u8"—Ç–µ—Å—Ç", 4);
}

void test_utf8_utils_emojis() {
  // –≠–º–æ–¥–∑–∏ ‚Äî –ø–æ –æ–¥–Ω–æ–º—É —é–Ω–∏–∫–æ–¥-—Å–∏–º–≤–æ–ª—É –∫–∞–∂–¥—ã–π
  expectLen(u8"üôÇ", 1);
  expectLen(u8"üôÇüôÇüôÇ", 3);
  // –°–º–µ—à–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
  expectLen(std::string(u8"AüôÇ–ë"), 3);
}

void test_utf8_utils_combining() {
  // –ë—É–∫–≤–∞ + –∫–æ–º–±–∏–Ω–∏—Ä—É—é—â–∏–π –¥–∏–∞–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –∑–Ω–∞–∫: 1 –±–∞–∑–æ–≤—ã–π + 1 –∫–æ–º–±–∏–Ω–∏—Ä—É—é—â–∏–π
  // –î–ª—è –Ω–∞—à–µ–π –ø—Ä–æ—Å—Ç–æ–π –ª–æ–≥–∏–∫–∏ –ø–æ–¥—Å—á—ë—Ç–∞ –ª–∏–¥–∏—Ä—É—é—â–∏—Ö –±–∞–π—Ç–æ–≤ –ø–æ–ª—É—á–∏—Ç—Å—è 2
  expectLen(std::string("a\xCC\x81"), 2); // "aÃÅ"
}
